diff --git a/src/network/access/qnetworkaccessmanager.cpp b/src/network/access/qnetworkaccessmanager.cpp
index 6f6aa73f62..05382f3711 100644
--- a/src/network/access/qnetworkaccessmanager.cpp
+++ b/src/network/access/qnetworkaccessmanager.cpp
@@ -477,12 +477,13 @@ QNetworkAccessManager::QNetworkAccessManager(QObject *parent)
     Q_D(QNetworkAccessManager);
 
     if (QNetworkStatusMonitor::isEnabled()) {
-        connect(&d->statusMonitor, SIGNAL(onlineStateChanged(bool)),
+        d->statusMonitor = new QNetworkStatusMonitor(this);
+        connect(d->statusMonitor, SIGNAL(onlineStateChanged(bool)),
                 SLOT(_q_onlineStateChanged(bool)));
 #ifdef QT_NO_BEARERMANAGEMENT
-        d->networkAccessible = d->statusMonitor.isNetworkAccessible();
+        d->networkAccessible = d->statusMonitor->isNetworkAccessible();
 #else
-        d->networkAccessible = d->statusMonitor.isNetworkAccessible() ? Accessible : NotAccessible;
+        d->networkAccessible = d->statusMonitor->isNetworkAccessible() ? Accessible : NotAccessible;
     } else {
         // if a session is required, we track online state through
         // the QNetworkSession's signals if a request is already made.
@@ -1047,7 +1048,7 @@ QNetworkConfiguration QNetworkAccessManager::configuration() const
     Q_D(const QNetworkAccessManager);
 
     QSharedPointer<QNetworkSession> session(d->getNetworkSession());
-    if (session && !d->statusMonitor.isEnabled()) {
+    if (session && !d->statusMonitor->isEnabled()) {
         return session->configuration();
     } else {
         return d->networkConfigurationManager.defaultConfiguration();
@@ -1075,7 +1076,7 @@ QNetworkConfiguration QNetworkAccessManager::activeConfiguration() const
     Q_D(const QNetworkAccessManager);
 
     QSharedPointer<QNetworkSession> networkSession(d->getNetworkSession());
-    if (networkSession && !d->statusMonitor.isEnabled()) {
+    if (networkSession && !d->statusMonitor->isEnabled()) {
         return d->networkConfigurationManager.configurationFromIdentifier(
             networkSession->sessionProperty(QLatin1String("ActiveConfiguration")).toString());
     } else {
@@ -1119,9 +1120,9 @@ QNetworkAccessManager::NetworkAccessibility QNetworkAccessManager::networkAccess
 {
     Q_D(const QNetworkAccessManager);
 
-    if (d->statusMonitor.isEnabled()) {
-        if (!d->statusMonitor.isMonitoring())
-            d->statusMonitor.start();
+    if (d->statusMonitor->isEnabled()) {
+        if (!d->statusMonitor->isMonitoring())
+            d->statusMonitor->start();
         return d->networkAccessible;
     }
 
@@ -1446,14 +1447,19 @@ QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Opera
         }
     }
 
-    if (d->statusMonitor.isEnabled()) {
+    if (d->statusMonitor->isEnabled()) {
+        if (!d->statusMonitor->isMonitoring() && !d->statusMonitor->start())
+            qWarning(lcNetMon, "failed to start network status monitoring");
+
         // See the code in ctor - QNetworkStatusMonitor allows us to
         // immediately set 'networkAccessible' even before we start
-        // the monitor.
+        // the monitor. If the monitor is unable to monitor then let's
+        // assume there's something wrong with the monitor and keep going.
+        if (d->statusMonitor->isMonitoring()
 #ifdef QT_NO_BEARERMANAGEMENT
-        if (!d->networkAccessible
+            && !d->networkAccessible
 #else
-        if (d->networkAccessible == NotAccessible
+            && d->networkAccessible == NotAccessible
 #endif // QT_NO_BEARERMANAGEMENT
             && !isLocalFile) {
             QHostAddress dest;
@@ -1464,9 +1470,6 @@ QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Opera
                 return new QDisabledNetworkReply(this, req, op);
             }
         }
-
-        if (!d->statusMonitor.isMonitoring() && !d->statusMonitor.start())
-            qWarning(lcNetMon, "failed to start network status monitoring");
     } else {
 #ifndef QT_NO_BEARERMANAGEMENT // ### Qt6: Remove section
         // Return a disabled network reply if network access is disabled.
@@ -1553,7 +1556,7 @@ QNetworkReply *QNetworkAccessManager::createRequest(QNetworkAccessManager::Opera
 #endif
         QNetworkReplyHttpImpl *reply = new QNetworkReplyHttpImpl(this, request, op, outgoingData);
 #ifndef QT_NO_BEARERMANAGEMENT // ### Qt6: Remove section
-        if (!d->statusMonitor.isEnabled()) {
+        if (!d->statusMonitor->isEnabled()) {
             connect(this, SIGNAL(networkSessionConnected()),
                     reply, SLOT(_q_networkSessionConnected()));
         }
@@ -2115,7 +2118,7 @@ void QNetworkAccessManagerPrivate::_q_onlineStateChanged(bool isOnline)
 {
     Q_Q(QNetworkAccessManager);
 
-    if (statusMonitor.isEnabled()) {
+    if (statusMonitor->isEnabled()) {
         networkAccessible = isOnline ? QNetworkAccessManager::Accessible : QNetworkAccessManager::NotAccessible;
         return;
     }
@@ -2152,7 +2155,7 @@ QT_WARNING_POP
 
 void QNetworkAccessManagerPrivate::_q_configurationChanged(const QNetworkConfiguration &configuration)
 {
-    if (statusMonitor.isEnabled())
+    if (statusMonitor->isEnabled())
         return;
 
     const QString id = configuration.identifier();
@@ -2187,7 +2190,7 @@ void QNetworkAccessManagerPrivate::_q_configurationChanged(const QNetworkConfigu
 
 void QNetworkAccessManagerPrivate::_q_networkSessionFailed(QNetworkSession::SessionError)
 {
-    if (statusMonitor.isEnabled())
+    if (statusMonitor->isEnabled())
         return;
 
     const auto cfgs = networkConfigurationManager.allConfigurations();
diff --git a/src/network/access/qnetworkaccessmanager_p.h b/src/network/access/qnetworkaccessmanager_p.h
index 7926463d56..ef2d8e61ef 100644
--- a/src/network/access/qnetworkaccessmanager_p.h
+++ b/src/network/access/qnetworkaccessmanager_p.h
@@ -225,7 +225,7 @@ public:
     QScopedPointer<QHstsStore> stsStore;
 #endif // QT_CONFIG(settings)
     bool stsEnabled = false;
-    mutable QNetworkStatusMonitor statusMonitor;
+    QNetworkStatusMonitor *statusMonitor = nullptr;
 
     bool autoDeleteReplies = false;
 
diff --git a/src/network/kernel/qnetconmonitor_darwin.mm b/src/network/kernel/qnetconmonitor_darwin.mm
index f6daf9ed50..9c0c4a55f4 100644
--- a/src/network/kernel/qnetconmonitor_darwin.mm
+++ b/src/network/kernel/qnetconmonitor_darwin.mm
@@ -310,8 +310,8 @@ public:
     bool isOnlineIpv6 = false;
 };
 
-QNetworkStatusMonitor::QNetworkStatusMonitor()
-    : QObject(*new QNetworkStatusMonitorPrivate)
+QNetworkStatusMonitor::QNetworkStatusMonitor(QObject *parent)
+    : QObject(*new QNetworkStatusMonitorPrivate, parent)
 {
     Q_D(QNetworkStatusMonitor);
 
@@ -385,6 +385,11 @@ bool QNetworkStatusMonitor::isNetworkAccessible()
     return d->isOnlineIpv4 || d->isOnlineIpv6;
 }
 
+bool QNetworkStatusMonitor::event(QEvent *event)
+{
+    return QObject::event(event);
+}
+
 bool QNetworkStatusMonitor::isEnabled()
 {
     return true;
diff --git a/src/network/kernel/qnetconmonitor_p.h b/src/network/kernel/qnetconmonitor_p.h
index 282bac5081..30e3fa16ea 100644
--- a/src/network/kernel/qnetconmonitor_p.h
+++ b/src/network/kernel/qnetconmonitor_p.h
@@ -96,7 +96,7 @@ class Q_AUTOTEST_EXPORT QNetworkStatusMonitor : public QObject
     Q_OBJECT
 
 public:
-    QNetworkStatusMonitor();
+    QNetworkStatusMonitor(QObject *parent);
     ~QNetworkStatusMonitor();
 
     bool isNetworkAccessible();
@@ -105,6 +105,8 @@ public:
     void stop();
     bool isMonitoring() const;
 
+    bool event(QEvent *event) override;
+
     static bool isEnabled();
 
 Q_SIGNALS:
diff --git a/src/network/kernel/qnetconmonitor_stub.cpp b/src/network/kernel/qnetconmonitor_stub.cpp
index 1ad4e9ba5a..a8ff861739 100644
--- a/src/network/kernel/qnetconmonitor_stub.cpp
+++ b/src/network/kernel/qnetconmonitor_stub.cpp
@@ -100,8 +100,8 @@ class QNetworkStatusMonitorPrivate : public QObjectPrivate
 {
 };
 
-QNetworkStatusMonitor::QNetworkStatusMonitor()
-    : QObject(*new QNetworkStatusMonitorPrivate)
+QNetworkStatusMonitor::QNetworkStatusMonitor(QObject *parent)
+    : QObject(*new QNetworkStatusMonitorPrivate, parent)
 {
 }
 
@@ -128,6 +128,11 @@ bool QNetworkStatusMonitor::isNetworkAccessible()
     return false;
 }
 
+bool QNetworkStatusMonitor::event(QEvent *event)
+{
+    return QObject::event(event);
+}
+
 bool QNetworkStatusMonitor::isEnabled()
 {
     return false;
diff --git a/src/network/kernel/qnetconmonitor_win.cpp b/src/network/kernel/qnetconmonitor_win.cpp
index 59b6cd5b66..ca93c87dca 100644
--- a/src/network/kernel/qnetconmonitor_win.cpp
+++ b/src/network/kernel/qnetconmonitor_win.cpp
@@ -512,7 +512,6 @@ public:
 
     Q_REQUIRED_RESULT
     bool start();
-    Q_REQUIRED_RESULT
     bool stop();
 
 private:
@@ -651,8 +650,6 @@ QNetworkStatusMonitorPrivate::~QNetworkStatusMonitorPrivate()
         return;
     if (monitoring)
         stop();
-    managerEvents.Reset();
-    CoUninitialize();
 }
 
 void QNetworkStatusMonitorPrivate::setConnectivity(NLM_CONNECTIVITY newConnectivity)
@@ -668,10 +665,20 @@ void QNetworkStatusMonitorPrivate::setConnectivity(NLM_CONNECTIVITY newConnectiv
 
 bool QNetworkStatusMonitorPrivate::start()
 {
-    if (comInitFailed)
-        return false;
-    Q_ASSERT(managerEvents);
     Q_ASSERT(!monitoring);
+
+    if (comInitFailed) {
+        auto hr = CoInitialize(nullptr);
+        if (FAILED(hr)) {
+            qCWarning(lcNetMon) << "Failed to initialize COM:" << errorStringFromHResult(hr);
+            comInitFailed = true;
+            return false;
+        }
+        comInitFailed = false;
+    }
+    if (!managerEvents)
+        managerEvents = new QNetworkListManagerEvents(this);
+
     if (managerEvents->start())
         monitoring = true;
     return monitoring;
@@ -681,11 +688,19 @@ void QNetworkStatusMonitorPrivate::stop()
 {
     Q_ASSERT(managerEvents);
     Q_ASSERT(monitoring);
-    if (managerEvents->stop())
-        monitoring = false;
+    // Can return false but realistically shouldn't since that would break everything:
+    managerEvents->stop();
+    monitoring = false;
+    managerEvents.Reset();
+
+    CoUninitialize();
+    comInitFailed = true; // we check this value in start() to see if we need to re-initialize
 }
 
-QNetworkStatusMonitor::QNetworkStatusMonitor() : QObject(*new QNetworkStatusMonitorPrivate) {}
+QNetworkStatusMonitor::QNetworkStatusMonitor(QObject *parent)
+    : QObject(*new QNetworkStatusMonitorPrivate, parent)
+{
+}
 
 QNetworkStatusMonitor::~QNetworkStatusMonitor() {}
 
@@ -722,6 +737,16 @@ bool QNetworkStatusMonitor::isNetworkAccessible()
                | NLM_CONNECTIVITY_IPV4_LOCALNETWORK | NLM_CONNECTIVITY_IPV6_LOCALNETWORK);
 }
 
+bool QNetworkStatusMonitor::event(QEvent *event)
+{
+    if (event->type() == QEvent::ThreadChange && isMonitoring()) {
+        stop();
+        QMetaObject::invokeMethod(this, &QNetworkStatusMonitor::start, Qt::QueuedConnection);
+    }
+
+    return QObject::event(event);
+}
+
 bool QNetworkStatusMonitor::isEnabled()
 {
     return true;
