diff --git a/absl/container/flat_hash_map.h b/absl/container/flat_hash_map.h
index ebd9ed67..3751ead5 100644
--- a/absl/container/flat_hash_map.h
+++ b/absl/container/flat_hash_map.h
@@ -34,6 +34,7 @@
 
 #include <cstddef>
 #include <memory>
+#include <optional>
 #include <type_traits>
 #include <utility>
 
@@ -642,10 +643,10 @@ struct FlatHashMapPolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
     return memory_internal::IsLayoutCompatible<K, V>::value
-               ? &TypeErasedApplyToSlotFn<Hash, K>
-               : nullptr;
+               ? std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, K>)
+               : std::nullopt;
   }
 
   static size_t space_used(const slot_type*) { return 0; }
diff --git a/absl/container/flat_hash_set.h b/absl/container/flat_hash_set.h
index a3e36e05..905f01af 100644
--- a/absl/container/flat_hash_set.h
+++ b/absl/container/flat_hash_set.h
@@ -34,6 +34,7 @@
 
 #include <cstddef>
 #include <memory>
+#include <optional>
 #include <type_traits>
 #include <utility>
 
@@ -540,8 +541,8 @@ struct FlatHashSetPolicy {
   static size_t space_used(const T*) { return 0; }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return &TypeErasedApplyToSlotFn<Hash, T>;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, T>);
   }
 };
 }  // namespace container_internal
diff --git a/absl/container/internal/hash_policy_traits.h b/absl/container/internal/hash_policy_traits.h
index ad835d6f..ee3f1ee6 100644
--- a/absl/container/internal/hash_policy_traits.h
+++ b/absl/container/internal/hash_policy_traits.h
@@ -160,9 +160,9 @@ struct hash_policy_traits : common_policy_traits<Policy> {
 // silent error: the address of * will never be NULL [-Werror=address]
 #pragma GCC diagnostic ignored "-Waddress"
 #endif
-    return Policy::template get_hash_slot_fn<Hash>() == nullptr
+    return !Policy::template get_hash_slot_fn<Hash>().has_value()
                ? &hash_slot_fn_non_type_erased<Hash>
-               : Policy::template get_hash_slot_fn<Hash>();
+               : Policy::template get_hash_slot_fn<Hash>().value();
 #if defined(__GNUC__) && !defined(__clang__)
 #pragma GCC diagnostic pop
 #endif
diff --git a/absl/container/internal/hash_policy_traits_test.cc b/absl/container/internal/hash_policy_traits_test.cc
index 2d2c7c2c..66552635 100644
--- a/absl/container/internal/hash_policy_traits_test.cc
+++ b/absl/container/internal/hash_policy_traits_test.cc
@@ -18,6 +18,7 @@
 #include <functional>
 #include <memory>
 #include <new>
+#include <optional>
 
 #include "gmock/gmock.h"
 #include "gtest/gtest.h"
@@ -46,8 +47,8 @@ struct PolicyWithoutOptionalOps {
   static std::function<Slot&(Slot*)> value;
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
@@ -100,8 +101,8 @@ struct PolicyNoHashFn {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
@@ -109,8 +110,8 @@ size_t* PolicyNoHashFn::apply_called_count;
 
 struct PolicyCustomHashFn : PolicyNoHashFn {
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return &TypeErasedApplyToSlotFn<Hash, int>;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::optional<HashSlotFn>(&TypeErasedApplyToSlotFn<Hash, int>);
   }
 };
 
diff --git a/absl/container/internal/raw_hash_set_allocator_test.cc b/absl/container/internal/raw_hash_set_allocator_test.cc
index 7e7a5063..59907895 100644
--- a/absl/container/internal/raw_hash_set_allocator_test.cc
+++ b/absl/container/internal/raw_hash_set_allocator_test.cc
@@ -17,6 +17,7 @@
 #include <functional>
 #include <limits>
 #include <memory>
+#include <optional>
 #include <ostream>
 #include <set>
 #include <type_traits>
@@ -181,8 +182,8 @@ struct Policy {
   static slot_type& element(slot_type* slot) { return *slot; }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
diff --git a/absl/container/internal/raw_hash_set_benchmark.cc b/absl/container/internal/raw_hash_set_benchmark.cc
index 424b72cf..db052dae 100644
--- a/absl/container/internal/raw_hash_set_benchmark.cc
+++ b/absl/container/internal/raw_hash_set_benchmark.cc
@@ -19,6 +19,7 @@
 #include <cstdint>
 #include <limits>
 #include <numeric>
+#include <optional>
 #include <random>
 #include <string>
 #include <tuple>
@@ -65,8 +66,8 @@ struct IntPolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
@@ -128,8 +129,8 @@ class StringPolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
diff --git a/absl/container/internal/raw_hash_set_probe_benchmark.cc b/absl/container/internal/raw_hash_set_probe_benchmark.cc
index 8f36305d..be46f9e7 100644
--- a/absl/container/internal/raw_hash_set_probe_benchmark.cc
+++ b/absl/container/internal/raw_hash_set_probe_benchmark.cc
@@ -16,6 +16,7 @@
 // distributions, all using the default hash function for swisstable.
 
 #include <memory>
+#include <optional>
 #include <regex>  // NOLINT
 #include <vector>
 
@@ -73,7 +74,7 @@ struct Policy {
 
   template <class Hash>
   static constexpr auto get_hash_slot_fn() {
-    return nullptr;
+    return std::nullopt;
   }
 };
 
diff --git a/absl/container/internal/raw_hash_set_test.cc b/absl/container/internal/raw_hash_set_test.cc
index f1257d4b..45d16928 100644
--- a/absl/container/internal/raw_hash_set_test.cc
+++ b/absl/container/internal/raw_hash_set_test.cc
@@ -28,6 +28,7 @@
 #include <map>
 #include <memory>
 #include <numeric>
+#include <optional>
 #include <ostream>
 #include <random>
 #include <string>
@@ -523,8 +524,8 @@ struct ValuePolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 
   static constexpr bool soo_enabled() { return kSoo; }
@@ -631,8 +632,8 @@ class StringPolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
@@ -1114,8 +1115,8 @@ struct DecomposePolicy {
   }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return nullptr;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::nullopt;
   }
 };
 
diff --git a/absl/container/node_hash_map.h b/absl/container/node_hash_map.h
index 5615e496..34b6a933 100644
--- a/absl/container/node_hash_map.h
+++ b/absl/container/node_hash_map.h
@@ -40,6 +40,7 @@
 
 #include <cstddef>
 #include <memory>
+#include <optional>
 #include <type_traits>
 #include <utility>
 
@@ -640,10 +641,10 @@ class NodeHashMapPolicy
   static const Value& value(const value_type* elem) { return elem->second; }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
     return memory_internal::IsLayoutCompatible<Key, Value>::value
-               ? &TypeErasedDerefAndApplyToSlotFn<Hash, Key>
-               : nullptr;
+               ? std::optional<HashSlotFn>(&TypeErasedDerefAndApplyToSlotFn<Hash, Key>)
+               : std::nullopt;
   }
 };
 }  // namespace container_internal
diff --git a/absl/container/node_hash_set.h b/absl/container/node_hash_set.h
index 53435ae6..40cd71c1 100644
--- a/absl/container/node_hash_set.h
+++ b/absl/container/node_hash_set.h
@@ -39,6 +39,7 @@
 
 #include <cstddef>
 #include <memory>
+#include <optional>
 #include <type_traits>
 
 #include "absl/algorithm/container.h"
@@ -534,8 +535,8 @@ struct NodeHashSetPolicy
   static size_t element_space_used(const T*) { return sizeof(T); }
 
   template <class Hash>
-  static constexpr HashSlotFn get_hash_slot_fn() {
-    return &TypeErasedDerefAndApplyToSlotFn<Hash, T>;
+  static constexpr std::optional<HashSlotFn> get_hash_slot_fn() {
+    return std::optional<HashSlotFn>(&TypeErasedDerefAndApplyToSlotFn<Hash, T>);
   }
 };
 }  // namespace container_internal
