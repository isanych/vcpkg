diff --git a/boost/network/compat.hpp b/boost/network/compat.hpp
index a22b4a2..498e767 100644
--- a/boost/network/compat.hpp
+++ b/boost/network/compat.hpp
@@ -13,7 +13,7 @@
 #define CPP_NETLIB_ASIO_IO_SERVICE_CONTEXT	boost::asio::io_context
 #else
 #define CPP_NETLIB_ASIO_GET_IO_SERVICE(s) ((s).get_io_service())
-#define CPP_NETLIB_ASIO_IO_SERVICE_CONTEXT	boost::asio::io_service
+#define CPP_NETLIB_ASIO_IO_SERVICE_CONTEXT	boost::asio::io_context
 #endif
 
 #endif  // BOOST_NETWORK_COMPAT_HPP__
diff --git a/boost/network/protocol/http/client/async_impl.hpp b/boost/network/protocol/http/client/async_impl.hpp
index 8e6dda6..70c08bb 100644
--- a/boost/network/protocol/http/client/async_impl.hpp
+++ b/boost/network/protocol/http/client/async_impl.hpp
@@ -11,7 +11,7 @@
 #include <thread>
 #include <memory>
 #include <functional>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/asio/strand.hpp>
 #include <boost/network/protocol/http/client/macros.hpp>
 #include <boost/network/protocol/http/traits/connection_policy.hpp>
@@ -46,7 +46,7 @@ struct async_client
 
   async_client(bool cache_resolved, bool follow_redirect,
                bool always_verify_peer, int timeout, bool remove_chunk_markers,
-               std::shared_ptr<boost::asio::io_service> service,
+               std::shared_ptr<boost::asio::io_context> service,
                optional<string_type> certificate_filename,
                optional<string_type> verify_path,
                optional<string_type> certificate_file,
@@ -56,10 +56,10 @@ struct async_client
       : connection_base(cache_resolved, follow_redirect, timeout,
                         remove_chunk_markers),
         service_ptr(service.get() ? service
-                                  : std::make_shared<boost::asio::io_service>()),
+                                  : std::make_shared<boost::asio::io_context>()),
         service_(*service_ptr),
         resolver_(service_),
-        sentinel_(new boost::asio::io_service::work(service_)),
+        sentinel_(new boost::asio::io_context::work(service_)),
         certificate_filename_(std::move(certificate_filename)),
         verify_path_(std::move(verify_path)),
         certificate_file_(std::move(certificate_file)),
@@ -69,7 +69,7 @@ struct async_client
         ssl_options_(ssl_options),
         always_verify_peer_(always_verify_peer) {
     connection_base::resolver_strand_.reset(
-        new boost::asio::io_service::strand(service_));
+        new boost::asio::io_context::strand(service_));
     if (!service)
       lifetime_thread_.reset(new std::thread([this]() { service_.run(); }));
   }
@@ -99,10 +99,10 @@ struct async_client
                                      generator);
   }
 
-  std::shared_ptr<boost::asio::io_service> service_ptr;
-  boost::asio::io_service& service_;
+  std::shared_ptr<boost::asio::io_context> service_ptr;
+  boost::asio::io_context& service_;
   resolver_type resolver_;
-  std::shared_ptr<boost::asio::io_service::work> sentinel_;
+  std::shared_ptr<boost::asio::io_context::work> sentinel_;
   std::shared_ptr<std::thread> lifetime_thread_;
   optional<string_type> certificate_filename_;
   optional<string_type> verify_path_;
diff --git a/boost/network/protocol/http/client/connection/async_normal.hpp b/boost/network/protocol/http/client/connection/async_normal.hpp
index 107c8bf..02ec0e2 100644
--- a/boost/network/protocol/http/client/connection/async_normal.hpp
+++ b/boost/network/protocol/http/client/connection/async_normal.hpp
@@ -312,7 +312,7 @@ struct http_async_connection
 
       auto self = this->shared_from_this();
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(this->part.data(),
+          boost::asio::mutable_buffer(this->part.data(),
                                          this->part.size()),
           request_strand_.wrap([=] (boost::system::error_code const &ec,
                                     std::size_t bytes_transferred) {
@@ -441,7 +441,7 @@ struct http_async_connection
             }
             auto self = this->shared_from_this();
             delegate_->read_some(
-                boost::asio::mutable_buffers_1(this->part.data(),
+                boost::asio::mutable_buffer(this->part.data(),
                                                this->part.size()),
                 request_strand_.wrap([=] (boost::system::error_code const &ec,
                                           std::size_t bytes_transferred) {
@@ -531,7 +531,7 @@ struct http_async_connection
               }
               auto self = this->shared_from_this();
               delegate_->read_some(
-                  boost::asio::mutable_buffers_1(this->part.data(),
+                  boost::asio::mutable_buffer(this->part.data(),
                                                  this->part.size()),
                   request_strand_.wrap([=] (boost::system::error_code const &ec,
                                             std::size_t bytes_transferred) {
@@ -598,7 +598,7 @@ struct http_async_connection
   bool follow_redirect_;
   resolver_type& resolver_;
   resolve_function resolve_;
-  boost::asio::io_service::strand request_strand_;
+  boost::asio::io_context::strand request_strand_;
   connection_delegate_ptr delegate_;
   boost::asio::streambuf command_streambuf;
   string_type method;
diff --git a/boost/network/protocol/http/client/connection/async_protocol_handler.hpp b/boost/network/protocol/http/client/connection/async_protocol_handler.hpp
index 383b620..25deb01 100644
--- a/boost/network/protocol/http/client/connection/async_protocol_handler.hpp
+++ b/boost/network/protocol/http/client/connection/async_protocol_handler.hpp
@@ -141,7 +141,7 @@ struct http_async_protocol_handler {
                             std::end(result_range));
       part_begin = part.begin();
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(part.data(), part.size()),
+          boost::asio::mutable_buffer(part.data(), part.size()),
           callback);
     }
     return parsed_ok;
@@ -187,7 +187,7 @@ struct http_async_protocol_handler {
                             std::end(result_range));
       part_begin = part.begin();
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(part.data(), part.size()),
+          boost::asio::mutable_buffer(part.data(), part.size()),
           callback);
     }
     return parsed_ok;
@@ -232,7 +232,7 @@ struct http_async_protocol_handler {
                             std::end(result_range));
       part_begin = part.begin();
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(part.data(), part.size()),
+          boost::asio::mutable_buffer(part.data(), part.size()),
           callback);
     }
     return parsed_ok;
@@ -333,7 +333,7 @@ struct http_async_protocol_handler {
                             std::end(result_range));
       part_begin = part.begin();
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(part.data(), part.size()),
+          boost::asio::mutable_buffer(part.data(), part.size()),
           callback);
     }
     return std::make_tuple(
@@ -396,7 +396,7 @@ struct http_async_protocol_handler {
       callback(boost::asio::error::eof, 0);
     } else {
       delegate_->read_some(
-          boost::asio::mutable_buffers_1(part.data(), part.size()), callback);
+          boost::asio::mutable_buffer(part.data(), part.size()), callback);
     }
   }
 
diff --git a/boost/network/protocol/http/client/connection/connection_delegate.hpp b/boost/network/protocol/http/client/connection/connection_delegate.hpp
index 6bbf4d3..1914fba 100644
--- a/boost/network/protocol/http/client/connection/connection_delegate.hpp
+++ b/boost/network/protocol/http/client/connection/connection_delegate.hpp
@@ -26,7 +26,7 @@ struct connection_delegate {
       boost::asio::streambuf &command_streambuf,
       std::function<void(boost::system::error_code const &, size_t)> handler) = 0;
   virtual void read_some(
-      boost::asio::mutable_buffers_1 const &read_buffer,
+      boost::asio::mutable_buffer const &read_buffer,
       std::function<void(boost::system::error_code const &, size_t)> handler) = 0;
   virtual void disconnect() = 0;
   virtual ~connection_delegate() = default;
diff --git a/boost/network/protocol/http/client/connection/normal_delegate.hpp b/boost/network/protocol/http/client/connection/normal_delegate.hpp
index 24955cd..2b4470e 100644
--- a/boost/network/protocol/http/client/connection/normal_delegate.hpp
+++ b/boost/network/protocol/http/client/connection/normal_delegate.hpp
@@ -10,7 +10,7 @@
 #include <memory>
 #include <cstdint>
 #include <functional>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/asio/ip/tcp.hpp>
 #include <boost/asio/placeholders.hpp>
 #include <boost/asio/streambuf.hpp>
@@ -22,7 +22,7 @@ namespace http {
 namespace impl {
 
 struct normal_delegate : connection_delegate {
-  explicit normal_delegate(boost::asio::io_service &service);
+  explicit normal_delegate(boost::asio::io_context &service);
 
   void connect(boost::asio::ip::tcp::endpoint &endpoint, std::string host,
                std::uint16_t source_port, optional<std::string> sni_hostname,
@@ -30,7 +30,7 @@ struct normal_delegate : connection_delegate {
   void write(boost::asio::streambuf &command_streambuf,
              std::function<void(boost::system::error_code const &, size_t)> handler)
       override;
-  void read_some(boost::asio::mutable_buffers_1 const &read_buffer,
+  void read_some(boost::asio::mutable_buffer const &read_buffer,
                  std::function<void(boost::system::error_code const &, size_t)> handler)
       override;
   void disconnect() override;
@@ -40,7 +40,7 @@ struct normal_delegate : connection_delegate {
   normal_delegate &operator=(normal_delegate) = delete;
 
  private:
-  boost::asio::io_service &service_;
+  boost::asio::io_context &service_;
   std::unique_ptr<boost::asio::ip::tcp::socket> socket_;
 };
 
diff --git a/boost/network/protocol/http/client/connection/normal_delegate.ipp b/boost/network/protocol/http/client/connection/normal_delegate.ipp
index 027f04a..8efb5a7 100644
--- a/boost/network/protocol/http/client/connection/normal_delegate.ipp
+++ b/boost/network/protocol/http/client/connection/normal_delegate.ipp
@@ -16,7 +16,7 @@
 #include <boost/network/protocol/http/client/connection/normal_delegate.hpp>
 
 boost::network::http::impl::normal_delegate::normal_delegate(
-    boost::asio::io_service &service)
+    boost::asio::io_context &service)
     : service_(service) {}
 
 void boost::network::http::impl::normal_delegate::connect(
@@ -40,7 +40,7 @@ void boost::network::http::impl::normal_delegate::write(
 }
 
 void boost::network::http::impl::normal_delegate::read_some(
-    boost::asio::mutable_buffers_1 const &read_buffer,
+    boost::asio::mutable_buffer const &read_buffer,
     std::function<void(boost::system::error_code const &, size_t)> handler) {
   socket_->async_read_some(read_buffer, handler);
 }
diff --git a/boost/network/protocol/http/client/connection/ssl_delegate.hpp b/boost/network/protocol/http/client/connection/ssl_delegate.hpp
index 6ad298d..1e9b22f 100644
--- a/boost/network/protocol/http/client/connection/ssl_delegate.hpp
+++ b/boost/network/protocol/http/client/connection/ssl_delegate.hpp
@@ -10,7 +10,7 @@
 #include <memory>
 #include <cstdint>
 #include <functional>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/asio/ssl.hpp>
 #include <boost/network/protocol/http/client/connection/connection_delegate.hpp>
 #include <boost/network/support/is_default_string.hpp>
@@ -24,7 +24,7 @@ namespace impl {
 
 struct ssl_delegate : public connection_delegate,
                       public std::enable_shared_from_this<ssl_delegate> {
-  ssl_delegate(boost::asio::io_service &service, bool always_verify_peer,
+  ssl_delegate(boost::asio::io_context &service, bool always_verify_peer,
                optional<std::string> certificate_filename,
                optional<std::string> verify_path,
                optional<std::string> certificate_file,
@@ -39,13 +39,13 @@ struct ssl_delegate : public connection_delegate,
       boost::asio::streambuf &command_streambuf,
       std::function<void(boost::system::error_code const &, size_t)> handler) override;
   void read_some(
-      boost::asio::mutable_buffers_1 const &read_buffer,
+      boost::asio::mutable_buffer const &read_buffer,
       std::function<void(boost::system::error_code const &, size_t)> handler) override;
   void disconnect() override;
   ~ssl_delegate() override;
 
  private:
-  boost::asio::io_service &service_;
+  boost::asio::io_context &service_;
   optional<std::string> certificate_filename_;
   optional<std::string> verify_path_;
   optional<std::string> certificate_file_;
diff --git a/boost/network/protocol/http/client/connection/ssl_delegate.ipp b/boost/network/protocol/http/client/connection/ssl_delegate.ipp
index 7575b12..150a26e 100644
--- a/boost/network/protocol/http/client/connection/ssl_delegate.ipp
+++ b/boost/network/protocol/http/client/connection/ssl_delegate.ipp
@@ -13,7 +13,7 @@
 #include <boost/network/protocol/http/client/connection/ssl_delegate.hpp>
 
 boost::network::http::impl::ssl_delegate::ssl_delegate(
-    boost::asio::io_service &service, bool always_verify_peer,
+    boost::asio::io_context &service, bool always_verify_peer,
     optional<std::string> certificate_filename,
     optional<std::string> verify_path, optional<std::string> certificate_file,
     optional<std::string> private_key_file, optional<std::string> ciphers,
@@ -80,7 +80,7 @@ void boost::network::http::impl::ssl_delegate::connect(
 
 
   if (always_verify_peer_)
-    socket_->set_verify_callback(boost::asio::ssl::rfc2818_verification(host));
+    socket_->set_verify_callback(boost::asio::ssl::host_name_verification(host));
   auto self = this->shared_from_this();
   socket_->lowest_layer().async_connect(
       endpoint,
@@ -104,7 +104,7 @@ void boost::network::http::impl::ssl_delegate::write(
 }
 
 void boost::network::http::impl::ssl_delegate::read_some(
-    boost::asio::mutable_buffers_1 const &read_buffer,
+    boost::asio::mutable_buffer const &read_buffer,
     std::function<void(boost::system::error_code const &, size_t)> handler) {
   socket_->async_read_some(read_buffer, handler);
 }
diff --git a/boost/network/protocol/http/client/facade.hpp b/boost/network/protocol/http/client/facade.hpp
index 8952b4e..ad97861 100644
--- a/boost/network/protocol/http/client/facade.hpp
+++ b/boost/network/protocol/http/client/facade.hpp
@@ -390,7 +390,7 @@ class basic_client_facade {
         options.openssl_verify_path(), options.openssl_certificate_file(),
         options.openssl_private_key_file(), options.openssl_ciphers(),
         options.openssl_sni_hostname(), options.openssl_options(),
-        options.io_service(), options.timeout(),
+        options.io_context(), options.timeout(),
         options.remove_chunk_markers()));
   }
 };
diff --git a/boost/network/protocol/http/client/options.hpp b/boost/network/protocol/http/client/options.hpp
index 124ca27..6d9b7e5 100644
--- a/boost/network/protocol/http/client/options.hpp
+++ b/boost/network/protocol/http/client/options.hpp
@@ -8,7 +8,7 @@
 // http://www.boost.org/LICENSE_1_0.txt)
 
 #include <memory>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/network/traits/string.hpp>
 #include <boost/optional/optional.hpp>
 
@@ -136,8 +136,8 @@ class client_options {
     return *this;
   }
 
-  /// Provide an `boost::asio::io_service` hosted in a shared pointer.
-  client_options& io_service(std::shared_ptr<boost::asio::io_service> v) {
+  /// Provide an `boost::asio::io_context` hosted in a shared pointer.
+  client_options& io_context(std::shared_ptr<boost::asio::io_context> v) {
     io_service_ = v;
     return *this;
   }
@@ -193,7 +193,7 @@ class client_options {
 
   long openssl_options() const { return openssl_options_; }
 
-  std::shared_ptr<boost::asio::io_service> io_service() const { return io_service_; }
+  std::shared_ptr<boost::asio::io_context> io_context() const { return io_service_; }
 
   bool always_verify_peer() const { return always_verify_peer_; }
 
@@ -211,7 +211,7 @@ class client_options {
   boost::optional<string_type> openssl_ciphers_;
   boost::optional<string_type> openssl_sni_hostname_;
   long openssl_options_;
-  std::shared_ptr<boost::asio::io_service> io_service_;
+  std::shared_ptr<boost::asio::io_context> io_service_;
   bool always_verify_peer_;
   int timeout_;
   bool remove_chunk_markers_;
diff --git a/boost/network/protocol/http/client/pimpl.hpp b/boost/network/protocol/http/client/pimpl.hpp
index 01c77ca..e0dc7c3 100644
--- a/boost/network/protocol/http/client/pimpl.hpp
+++ b/boost/network/protocol/http/client/pimpl.hpp
@@ -7,7 +7,7 @@
 // http://www.boost.org/LICENSE_1_0.txt)
 
 #include <memory>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/mpl/and.hpp>
 #include <boost/mpl/if.hpp>
 #include <boost/mpl/not.hpp>
@@ -74,7 +74,7 @@ struct basic_client_impl
                     optional<string_type> const& private_key_file,
                     optional<string_type> const& ciphers,
                     optional<string_type> const& sni_hostname, long ssl_options,
-                    std::shared_ptr<boost::asio::io_service> service, int timeout,
+                    std::shared_ptr<boost::asio::io_context> service, int timeout,
                     bool remove_chunk_markers)
       : base_type(cache_resolved, follow_redirect, always_verify_peer, timeout, 
                   remove_chunk_markers, service, certificate_filename, verify_path,
diff --git a/boost/network/protocol/http/client/sync_impl.hpp b/boost/network/protocol/http/client/sync_impl.hpp
index 354dfd3..873396a 100644
--- a/boost/network/protocol/http/client/sync_impl.hpp
+++ b/boost/network/protocol/http/client/sync_impl.hpp
@@ -37,8 +37,8 @@ struct sync_client
   typedef std::function<bool(string_type&)> body_generator_function_type;
   friend struct basic_client_impl<Tag, version_major, version_minor>;
 
-  std::shared_ptr<boost::asio::io_service> service_ptr;
-  boost::asio::io_service& service_;
+  std::shared_ptr<boost::asio::io_context> service_ptr;
+  boost::asio::io_context& service_;
   resolver_type resolver_;
   optional<string_type> certificate_filename_;
   optional<string_type> verify_path_;
@@ -51,7 +51,7 @@ struct sync_client
 
   sync_client(
       bool cache_resolved, bool follow_redirect, bool always_verify_peer,
-      int timeout, std::shared_ptr<boost::asio::io_service> service,
+      int timeout, std::shared_ptr<boost::asio::io_context> service,
       optional<string_type> certificate_filename = optional<string_type>(),
       optional<string_type> verify_path = optional<string_type>(),
       optional<string_type> certificate_file = optional<string_type>(),
@@ -61,7 +61,7 @@ struct sync_client
       long ssl_options = 0)
       : connection_base(cache_resolved, follow_redirect, timeout),
         service_ptr(service.get() ? service
-                                  : std::make_shared<boost::asio::io_service>()),
+                                  : std::make_shared<boost::asio::io_context>()),
         service_(*service_ptr),
         resolver_(service_),
         certificate_filename_(std::move(certificate_filename)),
diff --git a/boost/network/protocol/http/policies/async_resolver.hpp b/boost/network/protocol/http/policies/async_resolver.hpp
index c03cd5a..ced329b 100644
--- a/boost/network/protocol/http/policies/async_resolver.hpp
+++ b/boost/network/protocol/http/policies/async_resolver.hpp
@@ -39,8 +39,8 @@ struct async_resolver : std::enable_shared_from_this<async_resolver<Tag> > {
  protected:
   bool cache_resolved_;
   endpoint_cache endpoint_cache_;
-  std::shared_ptr<boost::asio::io_service> service_;
-  std::shared_ptr<boost::asio::io_service::strand> resolver_strand_;
+  std::shared_ptr<boost::asio::io_context> service_;
+  std::shared_ptr<boost::asio::io_context::strand> resolver_strand_;
 
   explicit async_resolver(bool cache_resolved)
       : cache_resolved_(cache_resolved), endpoint_cache_() {}
diff --git a/boost/network/protocol/http/server/async_connection.hpp b/boost/network/protocol/http/server/async_connection.hpp
index 58a1df1..25059e6 100644
--- a/boost/network/protocol/http/server/async_connection.hpp
+++ b/boost/network/protocol/http/server/async_connection.hpp
@@ -183,18 +183,18 @@ struct async_connection
 
  public:
   async_connection(
-      boost::asio::io_service& io_service, Handler& handler,
+      boost::asio::io_context& io_context, Handler& handler,
       utils::thread_pool& thread_pool,
       std::shared_ptr<ssl_context> ctx = std::shared_ptr<ssl_context>())
-      : strand(io_service),
+      : strand(io_context),
         handler(handler),
         thread_pool_(thread_pool),
         headers_buffer(
             BOOST_NETWORK_HTTP_SERVER_CONNECTION_HEADER_BUFFER_MAX_SIZE),
 #ifdef BOOST_NETWORK_ENABLE_HTTPS
-        socket_(io_service, ctx),
+        socket_(io_context, ctx),
 #else
-        socket_(io_service),
+        socket_(io_context),
 #endif
         handshake_done(false),
         headers_already_sent(false),
@@ -438,7 +438,7 @@ struct async_connection
   typedef std::lock_guard<std::recursive_mutex> lock_guard;
   typedef std::list<std::function<void()> > pending_actions_list;
 
-  boost::asio::io_service::strand strand;
+  boost::asio::io_context::strand strand;
   Handler& handler;
   utils::thread_pool& thread_pool_;
   boost::asio::streambuf headers_buffer;
@@ -673,9 +673,9 @@ struct async_connection
     // part of the completion handler.
     //
     // once the range has been linearized and sent, schedule
-    // a wrapper to be called in the io_service's thread, that
+    // a wrapper to be called in the io_context's thread, that
     // will re-schedule the given callback into the thread pool
-    // referred to here so that the io_service's thread can concentrate
+    // referred to here so that the io_context's thread can concentrate
     // on doing I/O.
     //
 
diff --git a/boost/network/protocol/http/server/options.hpp b/boost/network/protocol/http/server/options.hpp
index e84188b..4f664b4 100644
--- a/boost/network/protocol/http/server/options.hpp
+++ b/boost/network/protocol/http/server/options.hpp
@@ -9,7 +9,7 @@
 // http://www.boost.org/LICENSE_1_0.txt)
 
 #include <memory>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/asio/socket_base.hpp>
 #include <boost/network/protocol/stream_handler.hpp>
 #include <boost/network/traits/string.hpp>
@@ -71,8 +71,8 @@ struct server_options {
     return *this;
   }
 
-  /// Provides an Asio io_service for the server. Default is nullptr.
-  server_options &io_service(std::shared_ptr<boost::asio::io_service> v) {
+  /// Provides an Asio io_context for the server. Default is nullptr.
+  server_options &io_context(std::shared_ptr<boost::asio::io_context> v) {
     io_service_ = v;
     return *this;
   }
@@ -159,8 +159,8 @@ struct server_options {
     return *this;
   }
 
-  /// Returns the provided Asio io_service.
-  std::shared_ptr<boost::asio::io_service> io_service() const { return io_service_; }
+  /// Returns the provided Asio io_context.
+  std::shared_ptr<boost::asio::io_context> io_context() const { return io_service_; }
 
   /// Returns the address to listen on.
   string_type address() const { return address_; }
@@ -242,7 +242,7 @@ struct server_options {
   }
 
  private:
-  std::shared_ptr<boost::asio::io_service> io_service_;
+  std::shared_ptr<boost::asio::io_context> io_service_;
   Handler &handler_;
   string_type address_;
   string_type port_;
diff --git a/boost/network/protocol/http/server/storage_base.hpp b/boost/network/protocol/http/server/storage_base.hpp
index ec134a9..db49e88 100644
--- a/boost/network/protocol/http/server/storage_base.hpp
+++ b/boost/network/protocol/http/server/storage_base.hpp
@@ -20,13 +20,13 @@ struct server_storage_base {
  protected:
   template <class Tag, class Handler>
   explicit server_storage_base(server_options<Tag, Handler> const& options)
-      : self_service_(options.io_service()
-                          ? options.io_service()
-                          : std::make_shared<boost::asio::io_service>()),
+      : self_service_(options.io_context()
+                          ? options.io_context()
+                          : std::make_shared<boost::asio::io_context>()),
         service_(*self_service_) {}
 
-  std::shared_ptr<boost::asio::io_service> self_service_;
-  boost::asio::io_service& service_;
+  std::shared_ptr<boost::asio::io_context> self_service_;
+  boost::asio::io_context& service_;
 };
 
 } /* http */
diff --git a/boost/network/protocol/stream_handler.hpp b/boost/network/protocol/stream_handler.hpp
index 2b632ab..08e8106 100644
--- a/boost/network/protocol/stream_handler.hpp
+++ b/boost/network/protocol/stream_handler.hpp
@@ -18,7 +18,7 @@
 #include <boost/asio/detail/push_options.hpp>
 #include <boost/asio/detail/throw_error.hpp>
 #include <boost/asio/error.hpp>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <cstddef>
 
 #ifdef BOOST_NETWORK_ENABLE_HTTPS
@@ -49,7 +49,7 @@ struct stream_handler {
   stream_handler(std::shared_ptr<ssl_socket> socket)
       : ssl_sock_(std::move(socket)), ssl_enabled(true) {}
 
-  stream_handler(boost::asio::io_service& io,
+  stream_handler(boost::asio::io_context& io,
                  std::shared_ptr<ssl_context> ctx =
                      std::shared_ptr<ssl_context>()) {
     tcp_sock_ = std::make_shared<tcp_socket>(io.get_executor());
diff --git a/boost/network/utils/thread_pool.hpp b/boost/network/utils/thread_pool.hpp
index 515ac58..74bc4c4 100644
--- a/boost/network/utils/thread_pool.hpp
+++ b/boost/network/utils/thread_pool.hpp
@@ -9,7 +9,7 @@
 #include <cstddef>
 #include <memory>
 #include <functional>
-#include <boost/asio/io_service.hpp>
+#include <boost/asio/io_context.hpp>
 #include <boost/network/tags.hpp>
 #include <boost/scope_exit.hpp>
 #include <boost/network/utils/thread_group.hpp>
@@ -18,9 +18,9 @@ namespace boost {
 namespace network {
 namespace utils {
 
-typedef std::shared_ptr<boost::asio::io_service> io_service_ptr;
+typedef std::shared_ptr<boost::asio::io_context> io_service_ptr;
 typedef std::shared_ptr<utils::thread_group> worker_threads_ptr;
-typedef std::shared_ptr<boost::asio::io_service::work> sentinel_ptr;
+typedef std::shared_ptr<boost::asio::io_context::work> sentinel_ptr;
 
 template <class Tag>
 struct basic_thread_pool {
@@ -32,10 +32,10 @@ struct basic_thread_pool {
   basic_thread_pool() : basic_thread_pool(1) {}
 
   explicit basic_thread_pool(std::size_t threads,
-                    io_service_ptr io_service = io_service_ptr(),
+                    io_service_ptr io_context = io_service_ptr(),
                     worker_threads_ptr worker_threads = worker_threads_ptr())
       : threads_(threads),
-        io_service_(std::move(io_service)),
+        io_service_(std::move(io_context)),
         worker_threads_(std::move(worker_threads)),
         sentinel_() {
     bool commit = false;
@@ -54,7 +54,7 @@ struct basic_thread_pool {
     BOOST_SCOPE_EXIT_END
 
     if (!io_service_.get()) {
-      io_service_.reset(new boost::asio::io_service);
+      io_service_.reset(new boost::asio::io_context);
     }
 
     if (!worker_threads_.get()) {
@@ -62,7 +62,7 @@ struct basic_thread_pool {
     }
 
     if (!sentinel_.get()) {
-      sentinel_.reset(new boost::asio::io_service::work(*io_service_));
+      sentinel_.reset(new boost::asio::io_context::work(*io_service_));
     }
 
     for (std::size_t counter = 0; counter < threads_; ++counter) {
diff --git a/libs/network/example/http/hello_world_async_server_with_work_queue.cpp b/libs/network/example/http/hello_world_async_server_with_work_queue.cpp
index e758134..8dfae12 100644
--- a/libs/network/example/http/hello_world_async_server_with_work_queue.cpp
+++ b/libs/network/example/http/hello_world_async_server_with_work_queue.cpp
@@ -146,15 +146,15 @@ int main() {
     // the thread group
     auto threads(std::make_shared<boost::network::utils::thread_group>());
 
-    // setup asio::io_service
-    auto io_service(std::make_shared<boost::asio::io_service>());
-    auto work(std::make_shared<boost::asio::io_service::work>(std::ref(*io_service)));
+    // setup asio::io_context
+    auto io_context(std::make_shared<boost::asio::io_context>());
+    auto work(std::make_shared<boost::asio::io_context::work>(std::ref(*io_context)));
 
-    // io_service threads
+    // io_context threads
     {
       int n_threads = 5;
       while (0 < n_threads--) {
-        threads->create_thread([=] () { io_service->run(); });
+        threads->create_thread([=] () { io_context->run(); });
       }
     }
 
@@ -175,13 +175,13 @@ int main() {
         server::options(request_handler)
         .address("0.0.0.0")
         .port("8000")
-        .io_service(io_service)
+        .io_context(io_context)
         .reuse_address(true)
         .thread_pool(std::make_shared<boost::network::utils::thread_pool>(
-             2, io_service, threads))));
+             2, io_context, threads))));
 
     // setup clean shutdown
-    boost::asio::signal_set signals(*io_service, SIGINT, SIGTERM);
+    boost::asio::signal_set signals(*io_context, SIGINT, SIGTERM);
     signals.async_wait([=] (boost::system::error_code const &ec, int signal) {
         shut_me_down(ec, signal, server);
       });
@@ -190,7 +190,7 @@ int main() {
     server->run();
 
     work.reset();
-    io_service->stop();
+    io_context->stop();
 
     threads->join_all();
 
diff --git a/libs/network/example/http/ssl/ssl_server.cpp b/libs/network/example/http/ssl/ssl_server.cpp
index bc416a3..dabfead 100644
--- a/libs/network/example/http/ssl/ssl_server.cpp
+++ b/libs/network/example/http/ssl/ssl_server.cpp
@@ -62,9 +62,9 @@ void shut_me_down(const boost::system::error_code& error, int signal,
 
 int main(void) try {
 
-  // setup boost::asio::io_service
-  std::shared_ptr<boost::asio::io_service> p_io_service(
-      std::make_shared<boost::asio::io_service>());
+  // setup boost::asio::io_context
+  std::shared_ptr<boost::asio::io_context> p_io_service(
+      std::make_shared<boost::asio::io_context>());
 
   // Initialize SSL context
   std::shared_ptr<boost::asio::ssl::context> ctx =
@@ -86,7 +86,7 @@ int main(void) try {
       server::options(request_handler)
           .address("0.0.0.0")
           .port("8442")
-          .io_service(p_io_service)
+          .io_context(p_io_service)
           .reuse_address(true)
           .thread_pool(
                std::make_shared<boost::network::utils::thread_pool>(2))
diff --git a/libs/network/test/http/client_constructor_test.cpp b/libs/network/test/http/client_constructor_test.cpp
index 650cfa0..a216a7b 100644
--- a/libs/network/test/http/client_constructor_test.cpp
+++ b/libs/network/test/http/client_constructor_test.cpp
@@ -19,7 +19,7 @@ TYPED_TEST(HTTPClientTest, Constructors) {
   typename TypeParam::options options;
   TypeParam instance;
   TypeParam instance2(
-      options.io_service(std::make_shared<boost::asio::io_service>()));
+      options.io_context(std::make_shared<boost::asio::io_context>()));
 }
 
 TYPED_TEST(HTTPClientTest, ConstructorsWithOptions) {
@@ -31,6 +31,6 @@ TYPED_TEST(HTTPClientTest, ConstructorsWithOptions) {
       options.openssl_certificate_file("foo").openssl_private_key_file("bar"));
   TypeParam instance4(
       options.follow_redirects(true)
-          .io_service(std::make_shared<boost::asio::io_service>())
+          .io_context(std::make_shared<boost::asio::io_context>())
           .cache_resolved(true));
 }
diff --git a/libs/network/test/http/server_constructor_test.cpp b/libs/network/test/http/server_constructor_test.cpp
index 20041aa..98febff 100644
--- a/libs/network/test/http/server_constructor_test.cpp
+++ b/libs/network/test/http/server_constructor_test.cpp
@@ -31,23 +31,23 @@ TEST(HTTPServerTest, MinimalConstructor) {
 TEST(HTTPServerTest, WithIOServiceParameter) {
   dummy_async_handler async_handler;
   std::shared_ptr<util::thread_pool> thread_pool;
-  std::shared_ptr<boost::asio::io_service> io_service;
+  std::shared_ptr<boost::asio::io_context> io_context;
   async_server::options async_options(async_handler);
 
   ASSERT_NO_THROW(async_server async_instance(async_options.address("127.0.0.1")
                                                   .port("80")
-                                                  .io_service(io_service)
+                                                  .io_context(io_context)
                                                   .thread_pool(thread_pool)));
 }
 
 TEST(HTTPServerTes, ThrowsOnFailure) {
   dummy_async_handler async_handler;
   std::shared_ptr<util::thread_pool> thread_pool;
-  std::shared_ptr<boost::asio::io_service> io_service;
+  std::shared_ptr<boost::asio::io_context> io_context;
   async_server::options async_options(async_handler);
   async_server async_instance(async_options.address("127.0.0.1")
                                   .port("80")
-                                  .io_service(io_service)
+                                  .io_context(io_context)
                                   .thread_pool(thread_pool));
   EXPECT_THROW(async_instance.run(), std::runtime_error);
 }
