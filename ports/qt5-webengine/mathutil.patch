diff --git a/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp b/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp
index 9a2c2ec86..efd160710 100644
--- a/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp
+++ b/src/3rdparty/chromium/third_party/angle/src/common/mathutil.cpp
@@ -31,6 +31,9 @@ constexpr int g_sharedexp_bias = 15;
 // N is the number of mantissa bits per component (9)
 constexpr int g_sharedexp_mantissabits = 9;
 
+// number of mantissa bits per component pre-biased
+constexpr int g_sharedexp_biased_mantissabits = g_sharedexp_bias + g_sharedexp_mantissabits;
+
 // Emax is the maximum allowed biased exponent value (31)
 constexpr int g_sharedexp_maxexponent = 31;
 
@@ -51,17 +54,15 @@ unsigned int convertRGBFloatsTo999E5(float red, float green, float blue)
     const float exp_p =
         std::max<float>(-g_sharedexp_bias - 1, floor(log(max_c))) + 1 + g_sharedexp_bias;
     const int max_s = static_cast<int>(
-        floor((max_c / (pow(2.0f, exp_p - g_sharedexp_bias - g_sharedexp_mantissabits))) + 0.5f));
+        floor((max_c / (pow(2.0f, exp_p - g_sharedexp_biased_mantissabits))) + 0.5f));
     const int exp_s =
         static_cast<int>((max_s < pow(2.0f, g_sharedexp_mantissabits)) ? exp_p : exp_p + 1);
+    const float pow2_exp = pow(2.0f, static_cast<float>(exp_s) - g_sharedexp_biased_mantissabits);
 
     RGB9E5Data output;
-    output.R = static_cast<unsigned int>(
-        floor((red_c / (pow(2.0f, exp_s - g_sharedexp_bias - g_sharedexp_mantissabits))) + 0.5f));
-    output.G = static_cast<unsigned int>(
-        floor((green_c / (pow(2.0f, exp_s - g_sharedexp_bias - g_sharedexp_mantissabits))) + 0.5f));
-    output.B = static_cast<unsigned int>(
-        floor((blue_c / (pow(2.0f, exp_s - g_sharedexp_bias - g_sharedexp_mantissabits))) + 0.5f));
+    output.R = static_cast<unsigned int>(floor((red_c / pow2_exp) + 0.5f));
+    output.G = static_cast<unsigned int>(floor((green_c / pow2_exp) + 0.5f));
+    output.B = static_cast<unsigned int>(floor((blue_c / pow2_exp) + 0.5f));
     output.E = exp_s;
 
     return bitCast<unsigned int>(output);
@@ -71,12 +72,12 @@ void convert999E5toRGBFloats(unsigned int input, float *red, float *green, float
 {
     const RGB9E5Data *inputData = reinterpret_cast<const RGB9E5Data *>(&input);
 
-    *red =
-        inputData->R * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
-    *green =
-        inputData->G * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
-    *blue =
-        inputData->B * pow(2.0f, (int)inputData->E - g_sharedexp_bias - g_sharedexp_mantissabits);
+    const float pow2_exp =
+        pow(2.0f, static_cast<float>(inputData->E) - g_sharedexp_biased_mantissabits);
+
+    *red   = inputData->R * pow2_exp;
+    *green = inputData->G * pow2_exp;
+    *blue  = inputData->B * pow2_exp;
 }
 
 int BitCountPolyfill(uint32_t bits)
