diff --git a/src/3rdparty/chromium/build/config/compiler/BUILD.gn b/src/3rdparty/chromium/build/config/compiler/BUILD.gn
index b511a58c5..a27a45d2e 100644
--- a/src/3rdparty/chromium/build/config/compiler/BUILD.gn
+++ b/src/3rdparty/chromium/build/config/compiler/BUILD.gn
@@ -64,7 +64,7 @@ declare_args() {
 
   # Enable fatal linker warnings. Building Chromium with certain versions
   # of binutils can cause linker warning.
-  fatal_linker_warnings = true
+  fatal_linker_warnings = false
 
   # Build with C++ RTTI enabled. Chromium builds without RTTI by default,
   # but some sanitizers are known to require it, like CFI diagnostics
@@ -1502,6 +1502,7 @@ config("default_warnings") {
       # Disable a number of GCC warnings caused by a mix
       # of Chromium and GCC bugs.
       cflags += [ "-Wno-dangling-else" ]
+      cflags += [ "-fpermissive" ]
       cflags_cc += [ "-Wno-attributes" ]
       cflags_cc += [ "-Wno-class-memaccess" ]
       cflags_cc += [ "-Wno-subobject-linkage" ]
diff --git a/src/3rdparty/chromium/build/config/pch.gni b/src/3rdparty/chromium/build/config/pch.gni
index 93bd2fedc..a55fbaecd 100644
--- a/src/3rdparty/chromium/build/config/pch.gni
+++ b/src/3rdparty/chromium/build/config/pch.gni
@@ -8,5 +8,5 @@ declare_args() {
   # Precompiled header file support is by default available,
   # but for distributed build system uses (like goma) or when
   # doing official builds.
-  enable_precompiled_headers = !is_official_build && !use_goma
+  enable_precompiled_headers = false
 }
diff --git a/src/3rdparty/chromium/gpu/command_buffer/service/program_manager.cc b/src/3rdparty/chromium/gpu/command_buffer/service/program_manager.cc
index 021530c7e..5db4135ae 100644
--- a/src/3rdparty/chromium/gpu/command_buffer/service/program_manager.cc
+++ b/src/3rdparty/chromium/gpu/command_buffer/service/program_manager.cc
@@ -620,7 +620,7 @@ std::string Program::ProcessLogInfo(const std::string& log) {
       output += hashed_name;
   }
 
-  return output + input.as_string();
+  return output + static_cast<std::string>(input);
 }
 
 void Program::UpdateLogInfo() {
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
index 5dc17a425..0047a2796 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/BUILD.gn
@@ -37,27 +37,6 @@ config("core_include_dirs") {
 import("//build/config/pch.gni")
 
 config("blink_core_pch") {
-  # Add precompiled header (pch) support when enabled, possible and
-  # making sense.
-  if (enable_precompiled_headers) {
-    if (is_win) {
-      # This is a string rather than a file GN knows about. It has to match
-      # exactly what's in the /FI flag below, and what might appear in the
-      # source code in quotes for an #include directive.
-      precompiled_header = rebase_path("precompile_core.h", root_build_dir)
-
-      # This is a file that GN will compile with the above header. It will be
-      # implicitly added to the sources (potentially multiple times, with one
-      # variant for each language used in the target).
-      precompiled_source =
-          "//third_party/blink/renderer/core/win/precompile_core.cc"
-
-      # Force include the header.
-      cflags = [ "/FI$precompiled_header" ]
-    } else if (is_mac) {
-      precompiled_source = "//third_party/blink/renderer/core/precompile_core.h"
-    }
-  }
 }
 
 core_config_add += [
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/layout_svg_resource_paint_server.cc b/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/layout_svg_resource_paint_server.cc
index 99ba54e79..abf846791 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/layout_svg_resource_paint_server.cc
+++ b/src/3rdparty/chromium/third_party/blink/renderer/core/layout/svg/layout_svg_resource_paint_server.cc
@@ -94,7 +94,7 @@ void SVGPaintServer::PrependTransform(const AffineTransform& transform) {
   transform_ = transform * transform_;
 }
 
-static base::Optional<Color> ResolveColor(const ComputedStyle& style,
+static base::Optional<Color> ResolveColorSvgPaintServer(const ComputedStyle& style,
                                           const SVGPaint& paint,
                                           const SVGPaint& visited_paint) {
   if (!paint.HasColor())
@@ -122,7 +122,7 @@ static SVGPaintDescription RequestPaint(const LayoutObject& object,
   const SVGPaint& visited_paint = apply_to_fill
                                       ? svg_style.InternalVisitedFillPaint()
                                       : svg_style.InternalVisitedStrokePaint();
-  base::Optional<Color> color = ResolveColor(style, paint, visited_paint);
+  base::Optional<Color> color = ResolveColorSvgPaintServer(style, paint, visited_paint);
 
   if (paint.HasUrl()) {
     LayoutSVGResourcePaintServer* uri_resource = nullptr;
diff --git a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
index 2e0d575a9..d1acfa8b5 100644
--- a/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
+++ b/src/3rdparty/chromium/third_party/blink/renderer/platform/BUILD.gn
@@ -218,28 +218,6 @@ config("blink_platform_implementation") {
 }
 
 config("blink_platform_pch") {
-  visibility = []
-  visibility = [ "./*" ]
-  if (enable_precompiled_headers) {
-    if (is_win) {
-      # This is a string rather than a file GN knows about. It has to match
-      # exactly what's in the /FI flag below, and what might appear in the
-      # source code in quotes for an #include directive.
-      precompiled_header = rebase_path("precompile_platform.h", root_build_dir)
-
-      # This is a file that GN will compile with the above header. It will be
-      # implicitly added to the sources (potentially multiple times, with one
-      # variant for each language used in the target).
-      precompiled_source =
-          "//third_party/blink/renderer/platform/win/precompile_platform.cc"
-
-      # Force include the header.
-      cflags = [ "/FI$precompiled_header" ]
-    } else if (is_mac) {
-      precompiled_source =
-          "//third_party/blink/renderer/platform/precompile_platform.h"
-    }
-  }
 }
 
 source_set("platform_export") {
diff --git a/src/core/core_chromium.pri b/src/core/core_chromium.pri
index a846f2fbc..738833988 100644
--- a/src/core/core_chromium.pri
+++ b/src/core/core_chromium.pri
@@ -32,6 +32,12 @@ isUniversal() {
 # whenever we are cross compiling.
 qtConfig(webengine-embedded-build): DEFINES += QTWEBENGINE_EMBEDDED_SWITCHES
 
+# Prepend Chromium's protobuf and abseil-cpp include directories to the include paths
+# to ensure we use chromiums own copies instead of vcpkg provided libraries.
+# See https://github.com/microsoft/vcpkg/issues/12150
+CHROMIUM_SRC_DIR = $$QTWEBENGINE_ROOT/$$getChromiumSrcDir()
+INCLUDEPATH = $$CHROMIUM_SRC_DIR/third_party/protobuf/src $$CHROMIUM_SRC_DIR/third_party/abseil-cpp $$INCLUDEPATH
+
 INCLUDEPATH += $$PWD $$PWD/api
 
 clang_cl {
